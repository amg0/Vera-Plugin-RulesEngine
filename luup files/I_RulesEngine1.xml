<?xml version="1.0"?>
<implementation>
	<functions>
		--local RulesEngine

		function RulesEngine_startup (lul_device)
			luup.log("RulesEngine startup")
			RulesEngine = require("L_RulesEngine1")
			if (RulesEngine ~= nil) then
				return RulesEngine.startup(lul_device)
			else
				return false, "Can't load library"
			end
		end
	</functions>
	<startup>RulesEngine_startup</startup>
	<actionList>
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>SetTarget</name>
			<job>
				if (RulesEngine ~= nil) then
					if ((lul_settings.newTargetValue == "1") and not RulesEngine.isStarted()) then
						RulesEngine.start()
					elseif ((lul_settings.newTargetValue == "0") and RulesEngine.isStarted()) then
						RulesEngine.stop()
					end
				end
				return 4, nil
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RulesEngine1</serviceId>
			<name>LoadRules</name>
			<job>
				if (RulesEngine ~= nil) then
					RulesEngine.loadRulesFile(lul_settings.fileName, false)
				end
				return 4, nil
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RulesEngine1</serviceId>
			<name>SetRuleArming</name>
			<job>
				if (RulesEngine ~= nil) then
					RulesEngine.setRuleArming(lul_settings.ruleId, lul_settings.arming)
				end
				return 4, nil
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:RulesEngine1</serviceId>
			<name>SetRuleAcknowledgement</name>
			<job>
				if (RulesEngine ~= nil) then
					RulesEngine.setRuleAcknowledgement(lul_settings.ruleId, lul_settings.acknowledgement)
				end
				return 4, nil
			</job>
		</action>
	</actionList>
</implementation>
